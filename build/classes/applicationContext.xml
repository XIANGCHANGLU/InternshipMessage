<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<context:annotation-config />
	<context:component-scan base-package="*" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/InternshipMessage?characterEncoding=UTF-8" />
		<property name="username" value="root" />
		<property name="password" value="960603" />

		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="500" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="2" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="1" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />

		<property name="annotatedClasses">
			<list>
				<value>dao.AdminVO</value>
				<value>dao.StudentinfoVO</value>
				<value>dao.TeacherinfoVO</value>
				<value>dao.CompanyinfoVO</value>
				<value>dao.ApplyJobVO</value>
				<value>dao.WeeklyreportVO</value>
				<value>dao.ThesisVO</value>
				<value>dao.EvaluationStuVO</value>
				<value>dao.ScoreVO</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=org.hibernate.dialect.MySQLDialect
				hibernate.hbm2ddl.auto=update
				hibernate.show_sql=true
				hibernate.format_sql=false
				hibernate.cache.use_second_level_cache=true
				hibernate.cache.use_query_cache=false
				hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
				connection.autoReconnect=true
				connection.autoReconnectForPools=true
				connection.is-connection-validation-required=true
				hibernate.hbm2ddl.auto =update
			</value>
		</property>
	</bean>
	 <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	   <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="*" rollback-for="Exception" propagation="REQUIRED" read-only="true"/>
        </tx:attributes>
    </tx:advice>
      <aop:config>
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* cn.javass..service..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
	<bean id="hibernateDao" class="dao.support.StandardDbSupport">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="LoginActionBean" class="struts2.action.LoginAction"
		scope="prototype">
		<property name="dbOperation" ref="hibernateDao"></property>
	</bean>
	<bean id="AdminActionBean" class="struts2.action.AdminAction"
		scope="prototype">
		<property name="dbOperation" ref="hibernateDao"></property>
	</bean>
	<bean id="TeacherActionBean" class="struts2.action.TeacherAction"
		scope="prototype">
		<property name="dbOperation" ref="hibernateDao"></property>
	</bean>
		<bean id="CompanyActionBean" class="struts2.action.CompanyAction"
		scope="prototype">
		<property name="dbOperation" ref="hibernateDao"></property>
	</bean>
		<bean id="StudentActionBean" class="struts2.action.StudentAction"
		scope="prototype">
		<property name="dbOperation" ref="hibernateDao"></property>
	</bean>
	<bean id="JournalActionBean" class="struts2.action.JournalAction"
		scope="prototype">
		<property name="dbOperation" ref="hibernateDao"></property>
	</bean>
	<bean id="RmSessionActionBean" class="struts2.action.RmSessionAction"
		scope="prototype">
		<property name="dbOperation" ref="hibernateDao"></property>
	</bean>
		<bean id="UploadActionBean" class="util.UploadAction"
		scope="prototype">
		<property name="dbOperation" ref="hibernateDao"></property>
	</bean>
			<bean id="ApplyActionBean" class="struts2.action.ApplyAction"
		scope="prototype">
		<property name="dbOperation" ref="hibernateDao"></property>
	</bean>
	<tx:annotation-driven transaction-manager="txManager" />
</beans>
